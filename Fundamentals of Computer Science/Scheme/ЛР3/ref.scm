(load "trace.scm")
(load "unit-testing.scm")

(define (ref seq ind . arg)
  (define (list-insert res seq ind arg)
    (if (null? seq)
        (if (= ind 0)
            (append res (cons arg '()))
            res)
        (if (= ind 0)
            (list-insert (append res (cons arg '())) seq (- ind 1) arg)
            (list-insert (append res (cons (car seq) '())) (cdr seq) (- ind 1) arg))))
  (define (vector-insert res seq ind arg)
    (if (null? seq)
        (if (= ind 0)
            (list->vector (append res (cons arg '())))
            (list->vector res))
        (if (= ind 0)
            (vector-insert (append res (cons arg '())) seq (- ind 1) arg)
            (vector-insert (append res (cons (car seq) '())) (cdr seq) (- ind 1) arg))))
  (define (string-insert res seq ind arg)
    (define (string-concat s1 s2)
      (if (null? s2)
          (list->string s1)
          (string-concat (append s1 (cons (car s2) '())) (cdr s2))))
    (if (string? arg)
        (if (= ind 0)
            (string-concat (string-concat res (string->list arg) seq))
            (string-insert (append res (cons (car seq) '())) (cdr seq) (- ind 1) arg))
        (and (char? arg)
             (if (null? seq)
                 (if (= ind 0)
                     (list->string (append res (cons arg '())))
                     (list->string res))
                 (if (= ind 0)
                     (string-insert (append res (cons arg '())) seq (- ind 1) arg)
                     (string-insert (append res (cons (car seq) '())) (cdr seq) (- ind 1) arg))))))
  (if (null? arg)
      (cond ((list? seq) (and (<= ind (- (length seq) 1))
                              (>= ind 0)
                              (list-ref seq ind)))
            ((vector? seq) (and (<= ind (- (vector-length seq) 1))
                                (>= ind 0)
                                (vector-ref seq ind)))
            ((string? seq) (and (<= ind (- (string-length seq) 1))
                                (>= ind 0)
                                (string-ref seq ind))))
      (cond ((list? seq) (and (<= ind (length seq))
                              (>= ind 0)
                              (list-insert '() seq ind (car arg))))
            ((vector? seq) (and (<= ind (vector-length seq))
                                (>= ind 0)
                                (vector-insert '() (vector->list seq) ind (car arg))))
            ((string? seq) (and (<= ind (string-length seq))
                                (>= ind 0)
                                (string-insert '() (string->list seq) ind (car arg)))))))

(define the-tests
  (list (test (ref '(1 2 3) 1 0) '(1 0 2 3))
        (test (ref #(1 2 3) 1 0)    #(1 0 2 3))
        (test (ref #(1 2 3) 1 #\0)  #(1 #\0 2 3))
        (test (ref "123" 1 #\0)     "1023")
        (test (ref "123" 1 0)       #f)
        (test (ref "123" 3 #\4)     "1234")
        (test (ref "123" 5 #\4)     #f)))