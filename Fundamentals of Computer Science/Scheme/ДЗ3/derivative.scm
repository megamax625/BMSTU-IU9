(define (derivative expr)
  (define (variable? x)
    (and (symbol? x)
         (not
          (or (eq? x '+)
              (eq? x '-)
              (eq? x '*)
              (eq? x '/)))))
  (define (make-sum s1 s2)
    (cond
      ((equal? s1 0) s2)
      ((equal? s2 0) s1)
      (else (list '+ s1 s2))))
  (define (make-subtraction minuend subtraend)
    (cond
      ((equal? minuend 0) (list '* -1 subtraend))
      ((equal? subtraend 0) minuend)
      (else (list '- minuend subtraend))))
  (define (make-product m1 m2)
    (cond
      ((or (equal? m1 0) (equal? m2 0)) 0)
      ((equal? m1 1) m2)
      ((equal? m2 1) m1)
      (else (list '* m1 m2))))
  (define (two-numbers? x)
    (and (pair? x) (number? (cadr x)) (number? (caddr x))))
  (define (sum? x)
    (and (pair? x) (eq? (car x) '+)))
  (define (product-of-two? x)
    (and (pair? x) (eq? (car x) '*) (equal? (length x) 3)))
  (define (product-of-more? x)
    (and (pair? x) (eq? (car x) '*) (> (length x) 3)))
  (define (subtraction? x)
    (and (pair? x) (eq? (car x) '-)))
  (define (sin? x)
    (and (pair? x) (eq? (car x) 'sin)))
  (define (cos? x)
    (and (pair? x) (eq? (car x) 'cos)))
  (define (ln? x)
    (and (pair? x) (eq? (car x) 'ln)))
  (define (exponential? x)
    (and (pair? x) (eq? (car x) 'expt) (not (number? (caddr x))) (not (eq? (cadr x) 'e))))
  (define (exponential-e? x)
    (and (pair? x) (eq? (car x) 'expt) (not (number? (caddr x))) (eq? (cadr x) 'e)))
  (define (power? x)
    (and (pair? x) (eq? (car x) 'expt) (not (number? (cadr x))) (not (eq? (cadr x) 'e))))
  (define (division-by-variable? x)
    (and (pair? x) (eq? (car x) '/) (variable? (caddr x))))
  (define (division-by-expression? x)
    (and (pair? x) (eq? (car x) '/) (not (variable? (caddr x))) (not (number? (caddr x)))))
  (define (new-division y x)
    (cond
      ((null? x) y)
      ((number? (car x)) (new-division (append y (cons (list '/ 1 (car x)) '())) (cdr x)))
      ((symbol? (car x)) (new-division (append y (cons (car x) '())) (cdr x)))
      ((eq? (car (car x)) 'expt) (new-division (append y (cons (list 'expt (cadr (car x)) (* -1 (caddr (car x)))) '())) (cdr x)))))
  (cond
   ((number? expr) 0)
   ((two-numbers? expr) 0)
   ((variable? expr) (if (equal? (car (string->list (symbol->string expr))) #\-)
                      -1
                      1))
   ((sum? expr) (make-sum (derivative (cadr expr))
                          (derivative (caddr expr))))
   ((subtraction? expr) (make-subtraction (derivative (cadr expr))
                                          (derivative (caddr expr))))
   ((product-of-two? expr) (make-sum (make-product (derivative (cadr expr)) (caddr expr))
                                     (make-product (cadr expr) (derivative (caddr expr)))))
   ((product-of-more? expr) (make-sum (make-product (derivative (cadr expr)) (cons '* (cddr expr)))
                                      (make-product (cadr expr) (derivative (cons '* (cddr expr))))))
   ((sin? expr) (make-product (derivative (cadr expr))
                              (list 'cos (cadr expr))))
   ((cos? expr) (make-product (derivative (cadr expr))
                              (list '* -1 (list 'sin (cadr expr)))))
   ((power? expr) (make-product (derivative (cadr expr))
                                (list '* (caddr expr) (list 'expt (cadr expr) (- (caddr expr) 1)))))
   ((exponential? expr) (make-product (derivative (caddr expr))
                                      (list '* expr (list 'ln (cadr expr)))))
   ((exponential-e? expr) (make-product (derivative (caddr expr)) expr))
   ((ln? expr) (make-product (list '/ 1 (cadr expr))
                             (derivative (cadr expr))))
   ((division-by-variable? expr) (if (equal? (cadr expr) 1)
                                 (list '* -1 (list 'expt (caddr expr) -2))
                                 (list '* (cadr expr) (list '* -1 (list 'expt (caddr expr) -2)))))
   ((division-by-expression? expr) (list '* (cadr expr) (derivative (new-division '() (caddr expr)))))
   (else 'hellotheresanerrortherehello)))

;;Тест-система и тесты
(define-syntax test
  (syntax-rules ()
    ((_ exprs res)
     (list (quote exprs) res))))

(define (run-test testin)
  (let ((exprs (car testin)))
    (write exprs)
    (let ((res (eval exprs (interaction-environment))))
      (if (equal? res (cadr testin))
          (begin
            (display " ok")
            (newline)
            #t)
          (begin
            (display " FAIL")
            (newline)
            (display "Expected: ") (write (cadr testin))
            (newline)
            (display "Returned: ") (write res)
            (newline)
            #f)))))

(define (run-tests tests)
  (define (pom res tests)
    (if (null? tests)
        res
        (pom (and res (car tests)) (cdr tests))))
  (pom #t (map run-test tests)))

(define the-tests
  (list (test (derivative '2) 0)
        (test (derivative 'x) 1)
        (test (derivative '-x) -1)
        (test (derivative '(* 1 x)) 1)
        (test (derivative '(* -1 x)) -1)
        (test (derivative '(* -4 x)) -4)
        (test (derivative '(* 10 x)) 10)
        (test (derivative '(- (* 2 x) 3)) 2)
        (test (derivative '(expt x 10)) '(* 10 (expt x 9)))
        (test (derivative '(* 2 (expt x 5))) '(* 2 (* 5 (expt x 4))))
        (test (derivative '(expt x -2)) '(* -2 (expt x -3)))
        (test (derivative '(expt 5 x)) '(* (expt 5 x) (ln 5)))
        (test (derivative '(cos x)) '(* -1 (sin x)))
        (test (derivative '(sin x)) '(cos x))
        (test (derivative '(expt e x)) '(expt e x))
        (test (derivative '(* 2 (expt e x))) '(* 2 (expt e x)))
        (test (derivative '(* 2 (expt e (* 2 x)))) '(* 2 (* 2 (expt e (* 2 x)))))
        (test (derivative '(ln x)) '(/ 1 x))
        (test (derivative '(* 3 (ln x))) '(* 3 (/ 1 x)))
        (test (derivative '(+ (expt x 3) (expt x 2))) '(+ (* 3 (expt x 2)) (* 2 (expt x 1))))
        (test (derivative '(- (* 2 (expt x 3)) (* 2 (expt x 2)))) '(- (* 2 (* 3 (expt x 2))) (* 2 (* 2 (expt x 1)))))
        (test (derivative '(/ 3 x)) '(* 3 (* -1 (expt x -2))))
        (test (derivative '(/ 3 (* 2 (expt x 2)))) '(* 3 (* (/ 1 2) (* -2 (expt x -3)))))
        (test (derivative '(* 2 (sin x) (cos x))) '(* 2 (+ (* (cos x) (cos x)) (* (sin x) (* -1 (sin x))))))
        (test (derivative '(sin (* 2 x))) '(* 2 (cos (* 2 x))))
        (test (derivative '(cos (* 2 (expt x 2)))) '(* (* 2 (* 2 (expt x 1))) (* -1 (sin (* 2 (expt x 2))))))
        (test (derivative '(sin (ln (expt x 2)))) '(* (* (/ 1 (expt x 2)) (* 2 (expt x 1))) (cos (ln (expt x 2)))))
        (test (derivative '(+ (sin (* 2 x)) (cos (* 2 (expt x 2))))) '(+ (* 2 (cos (* 2 x))) (* (* 2 (* 2 (expt x 1))) (* -1 (sin (* 2 (expt x 2)))))))
        (test (derivative '(* (sin (* 2 x)) (cos (* 2 (expt x 2)))))
                          '(+ (* (* 2 (cos (* 2 x))) (cos (* 2 (expt x 2)))) (* (sin (* 2 x)) (* (* 2 (* 2 (expt x 1))) (* -1 (sin (* 2 (expt x 2))))))))))